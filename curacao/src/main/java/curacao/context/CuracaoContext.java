/*
 * Copyright (c) 2019 Mark S. Kolich
 * http://mark.koli.ch
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following
 * conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
 * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 */

package curacao.context;

import curacao.CuracaoInvokable;
import curacao.annotations.RequestMapping;
import curacao.components.ComponentTable;
import curacao.mappers.MapperTable;
import curacao.mappers.request.RequestMappingTable;
import curacao.mappers.request.matchers.CuracaoPathMatcher;

import javax.annotation.Nonnull;
import javax.annotation.Nullable;
import javax.servlet.AsyncContext;
import javax.servlet.ServletContext;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.io.Closeable;
import java.util.Map;

public interface CuracaoContext extends Closeable {

    class Extensions {

        private static final String INVOKABLE_KEY = "curacao-invokable";
        private static final String PATH_WITHIN_APPLICATION_KEY = "curacao-pathWithinApplication";
        private static final String PATH_VARIABLES_KEY = "curacao-pathVariables";
        private static final String REQUEST_BODY_KEY = "curacao-requestBody";
        private static final String COMPONENT_TABLE_KEY = "curacao-componentTable";
        private static final String REQUEST_MAPPING_TABLE_KEY = "curacao-requestMappingTable";
        private static final String MAPPER_TABLE_KEY = "curacao-mapperTable";

        /**
         * Get the {@link CuracaoInvokable} attached to this context.
         *
         * The invokable here represents a controller class and method, that will be "invoked" by
         * Curacao using reflection to service the request.
         *
         * @return the {@link CuracaoInvokable} attached to this context, or null if one does not exist
         */
        @Nullable
        public static final CuracaoInvokable getInvokable(@Nonnull final CuracaoContext context) {
            return context.getProperty(INVOKABLE_KEY);
        }

        /**
         * Sets the {@link CuracaoInvokable} attached to this context.
         */
        public static final void setInvokable(@Nonnull final CuracaoContext context,
                                              @Nonnull final CuracaoInvokable invokable) {
            context.setProperty(INVOKABLE_KEY, invokable);
        }

        /**
         * Returns the path to the request without the Servlet context, if any.  For example, if the request is
         * GET:/foobar/dog/cat and the Servlet context is "foobar" then the path within application would
         * be GET:/dog/cat as extracted.
         */
        @Nullable
        public static final String getPathWithinApplication(@Nonnull final CuracaoContext context) {
            return context.getProperty(PATH_WITHIN_APPLICATION_KEY);
        }

        /**
         * Sets the path within the application as extracted.
         *
         * @param path the path within the application
         */
        public static final void setPathWithinApplication(@Nonnull final CuracaoContext context,
                                                          @Nonnull final String path) {
            context.setProperty(PATH_WITHIN_APPLICATION_KEY, path);
        }

        /**
         * Get the map that represents the matched and extracted path variables from the request, if any. This map is
         * typically immutable, and is generated by the underlying {@link CuracaoPathMatcher} which was invoked
         * and matched the request.
         *
         * @return an immutable map containing any extracted path variables
         */
        @Nullable
        public static final Map<String,String> getPathVariables(@Nonnull final CuracaoContext context) {
            return context.getProperty(PATH_VARIABLES_KEY);
        }

        /**
         * Sets the {@link CuracaoPathMatcher} matched path variables from this request.
         *
         * @param pathVars matcher extracted path variables
         */
        public static final void setPathVariables(@Nonnull final CuracaoContext context,
                                                  @Nonnull final Map<String,String> pathVars) {
            context.setProperty(PATH_VARIABLES_KEY, pathVars);
        }

        /**
         * Get the in-memory buffered copy of the request body, if it exists.
         *
         * @return the byte[] in memory buffered body, or null if no body has been buffered yet.
         */
        @Nullable
        public static final byte[] getBody(@Nonnull final CuracaoContext context) {
            return context.getProperty(REQUEST_BODY_KEY);
        }

        /**
         * Set the in-memory buffered copy of the request body.
         *
         * @param body the byte[] in memory buffered body.
         */
        public static final void setBody(@Nonnull final CuracaoContext context,
                                         @Nonnull final byte[] body) {
            context.setProperty(REQUEST_BODY_KEY, body);
        }

        // Curacao internals

        @Nullable
        public static final ComponentTable getComponentTable(@Nonnull final CuracaoContext context) {
            return context.getProperty(COMPONENT_TABLE_KEY);
        }

        public static final void setComponentTable(@Nonnull final CuracaoContext context,
                                                   @Nonnull final ComponentTable componentTable) {
            context.setProperty(COMPONENT_TABLE_KEY, componentTable);
        }

        @Nullable
        public static final RequestMappingTable getRequestMappingTable(@Nonnull final CuracaoContext context) {
            return context.getProperty(REQUEST_MAPPING_TABLE_KEY);
        }

        public static final void setRequestMappingTable(@Nonnull final CuracaoContext context,
                                                        @Nonnull final RequestMappingTable requestMappingTable) {
            context.setProperty(REQUEST_MAPPING_TABLE_KEY, requestMappingTable);
        }

        @Nullable
        public static final MapperTable getMapperTable(@Nonnull final CuracaoContext context) {
            return context.getProperty(MAPPER_TABLE_KEY);
        }

        public static final void setMapperTable(@Nonnull final CuracaoContext context,
                                                @Nonnull final MapperTable mapperTable) {
            context.setProperty(MAPPER_TABLE_KEY, mapperTable);
        }

    }

    public long getCreationTime();

    @Nonnull
    public ServletContext getServletContext();

    @Nonnull
    public AsyncContext getAsyncContext();

    @Nonnull
    public RequestMapping.Method getMethod();

    @Nonnull
    public HttpServletRequest getRequest();

    @Nonnull
    public HttpServletResponse getResponse();

    @Nullable
    public <T> T getProperty(final String key);

    public void setProperty(final String key,
                            final Object value);

}
